name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.REGISTRY }}
  PROJECT_SLUG: ${{ secrets.PROJECT_SLUG }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm type-check

      - name: Lint
        run: pnpm lint

      - name: Test
        run: pnpm test

  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Extract metadata for API
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.PROJECT_SLUG }}/api
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for Web
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.PROJECT_SLUG }}/web
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          build-args: |
            VITE_API_DOMAIN=${{ secrets.API_DOMAIN }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known_hosts
        run: |
          ssh-keyscan -H -p ${{ secrets.SSH_PORT || 22 }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Create environment file
        run: |
          cat > .env.prod << EOF
          NODE_ENV=production
          API_DOMAIN=${{ secrets.API_DOMAIN }}
          APP_DOMAIN=${{ secrets.APP_DOMAIN }}
          BOT_TOKEN=${{ secrets.BOT_TOKEN }}
          WEBHOOK_SECRET=${{ secrets.WEBHOOK_SECRET }}
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          REGISTRY=${{ secrets.REGISTRY }}
          PROJECT_SLUG=${{ secrets.PROJECT_SLUG }}
          EOF

      - name: Copy files to server
        run: |
          scp -P ${{ secrets.SSH_PORT || 22 }} -r \
            docker-compose.prod.yml \
            infra/ \
            .env.prod \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/${{ secrets.PROJECT_SLUG }}/

      - name: Deploy application
        run: |
          ssh -p ${{ secrets.SSH_PORT || 22 }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /opt/${{ secrets.PROJECT_SLUG }}
            
            # Create nginx config from templates
            mkdir -p infra/nginx/conf.d
            envsubst '${API_DOMAIN} ${APP_DOMAIN}' < infra/nginx/conf.d/api.conf.template > infra/nginx/conf.d/api.conf
            envsubst '${API_DOMAIN} ${APP_DOMAIN}' < infra/nginx/conf.d/web.conf.template > infra/nginx/conf.d/web.conf
            
            # Login to registry
            echo "${{ secrets.REGISTRY_TOKEN }}" | docker login ${{ secrets.REGISTRY }} -u "${{ secrets.REGISTRY_USER }}" --password-stdin
            
            # Pull latest images
            docker-compose -f docker-compose.prod.yml --env-file .env.prod pull
            
            # Deploy with zero-downtime
            docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d --remove-orphans
            
            # Clean up old images
            docker image prune -f
            
            # Wait for services to be healthy
            sleep 30
            
            # Check service health
            docker-compose -f docker-compose.prod.yml ps
          EOF

      - name: Run database migrations
        run: |
          ssh -p ${{ secrets.SSH_PORT || 22 }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /opt/${{ secrets.PROJECT_SLUG }}
            
            # Run migrations inside API container
            docker-compose -f docker-compose.prod.yml --env-file .env.prod exec -T api npm run db:migrate || true
            
            # Check API health
            curl -f http://localhost:3001/health || echo "API health check failed"
          EOF

      - name: Setup webhook
        run: |
          sleep 60  # Wait for services to fully start
          
          # Setup Telegram webhook
          curl -X POST "https://${{ secrets.API_DOMAIN }}/api/webhook/set" \
            -H "Content-Type: application/json" \
            || echo "Webhook setup failed, will retry manually"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "🌐 Web App: https://${{ secrets.APP_DOMAIN }}"
            echo "🤖 API: https://${{ secrets.API_DOMAIN }}/health"
          else
            echo "❌ Deployment failed!"
          fi
