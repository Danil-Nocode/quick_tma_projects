name: Build and Deploy

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.REGISTRY }}
  PROJECT_SLUG: ${{ secrets.PROJECT_SLUG }}

jobs:
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.REGISTRY_USER }}
        password: ${{ secrets.REGISTRY_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.REGISTRY_USER }}/${{ env.PROJECT_SLUG }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/api/Dockerfile
        push: true
        tags: ${{ secrets.REGISTRY_USER }}/${{ env.PROJECT_SLUG }}-api:${{ github.sha }},${{ secrets.REGISTRY_USER }}/${{ env.PROJECT_SLUG }}-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Web image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/web/Dockerfile
        push: true
        tags: ${{ secrets.REGISTRY_USER }}/${{ env.PROJECT_SLUG }}-web:${{ github.sha }},${{ secrets.REGISTRY_USER }}/${{ env.PROJECT_SLUG }}-web:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to server
      run: |
        ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          cd /opt/${{ secrets.PROJECT_SLUG }}
          
          # Pull latest images
          docker login -u ${{ secrets.REGISTRY_USER }} -p ${{ secrets.REGISTRY_TOKEN }}
          docker pull ${{ secrets.REGISTRY_USER }}/${{ secrets.PROJECT_SLUG }}-api:latest
          docker pull ${{ secrets.REGISTRY_USER }}/${{ secrets.PROJECT_SLUG }}-web:latest
          
          # Update and restart services
          docker compose -f docker-compose.prod.yml down
          docker compose -f docker-compose.prod.yml up -d
          
          # Cleanup old images
          docker image prune -f
        EOF