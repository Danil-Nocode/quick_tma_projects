#!/bin/bash

# Project check script - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[‚úÖ]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[‚ö†Ô∏è]${NC} $1"
}

log_error() {
    echo -e "${RED}[‚ùå]${NC} $1"
}

echo "üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Telegram Mini App –ø—Ä–æ–µ–∫—Ç–∞..."
echo "=================================================="

# Check Node.js version
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –≤–µ—Ä—Å–∏–∏..."
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    log_success "Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $NODE_VERSION"
else
    log_error "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

# Check pnpm
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ pnpm..."
if command -v pnpm &> /dev/null; then
    PNPM_VERSION=$(pnpm --version)
    log_success "pnpm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: v$PNPM_VERSION"
else
    log_error "pnpm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm install -g pnpm"
    exit 1
fi

# Check dependencies
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
if [ -f "pnpm-lock.yaml" ]; then
    log_success "pnpm-lock.yaml –Ω–∞–π–¥–µ–Ω"
else
    log_warning "pnpm-lock.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: pnpm install"
fi

# Check if node_modules exists
if [ -d "node_modules" ]; then
    log_success "node_modules –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
else
    log_warning "node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: pnpm install"
fi

# Check project structure
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."

# Essential files check
essential_files=(
    "package.json"
    "pnpm-workspace.yaml"
    "README.md"
    "apps/api/package.json"
    "apps/web/package.json"
    "docker-compose.prod.yml"
    ".github/workflows/deploy.yml"
    "env.example"
)

for file in "${essential_files[@]}"; do
    if [ -f "$file" ]; then
        log_success "$file ‚úì"
    else
        log_error "$file –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
done

# Essential directories check
essential_dirs=(
    "apps/api/src"
    "apps/web/src"
    "infra/nginx"
    "infra/scripts"
    "supabase/migrations"
    ".github/workflows"
)

for dir in "${essential_dirs[@]}"; do
    if [ -d "$dir" ]; then
        log_success "$dir/ ‚úì"
    else
        log_error "$dir/ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
done

# Check environment file
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
if [ -f ".env" ]; then
    log_success ".env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω"
    
    # Check for placeholder values
    if grep -q "\[\[.*\]\]" .env 2>/dev/null; then
        log_warning ".env —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã [[...]] - –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –∏—Ö —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"
    else
        log_success "–ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ .env –∑–∞–º–µ–Ω–µ–Ω—ã"
    fi
else
    log_warning ".env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–∑ env.example –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ"
fi

# Check TypeScript configuration
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
ts_configs=(
    "apps/api/tsconfig.json"
    "apps/web/tsconfig.json"
)

for config in "${ts_configs[@]}"; do
    if [ -f "$config" ]; then
        log_success "$config ‚úì"
    else
        log_error "$config –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
done

# Check Docker files
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
docker_files=(
    "apps/api/Dockerfile"
    "apps/web/Dockerfile"
    "docker-compose.prod.yml"
    "docker-compose.dev.yml"
)

for file in "${docker_files[@]}"; do
    if [ -f "$file" ]; then
        log_success "$file ‚úì"
    else
        log_error "$file –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
done

# Check scripts
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–ª–æ–π —Å–∫—Ä–∏–ø—Ç–æ–≤..."
scripts=(
    "infra/scripts/server-setup.sh"
    "infra/scripts/certbot-init.sh"
    "infra/scripts/deploy.sh"
    "infra/scripts/backup.sh"
)

for script in "${scripts[@]}"; do
    if [ -f "$script" ]; then
        if [ -x "$script" ]; then
            log_success "$script ‚úì (–∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π)"
        else
            log_warning "$script –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: chmod +x $script"
        fi
    else
        log_error "$script –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
done

# Check if git is initialized
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
if [ -d ".git" ]; then
    log_success "Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    
    # Check if there are any commits
    if git log --oneline -n 1 &> /dev/null; then
        log_success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–º–∏—Ç—ã"
    else
        log_warning "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—É—Å—Ç–æ–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç"
    fi
else
    log_warning "Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: git init"
fi

# Summary
echo ""
echo "=================================================="
echo "üéØ –†–µ–∑—é–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"
echo "=================================================="

# Check if we can run basic commands
log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥..."

# Test type checking
if pnpm type-check &> /dev/null; then
    log_success "TypeScript –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –ø—Ä–æ—Ö–æ–¥–∏—Ç"
else
    log_warning "TypeScript –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç"
fi

# Test build
if pnpm build &> /dev/null; then
    log_success "–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–∞"
else
    log_warning "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –ø—Ä–æ–µ–∫—Ç–∞"
fi

echo ""
echo "üöÄ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:"
echo ""
echo "1. üì• –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:"
echo "   pnpm install"
echo ""
echo "2. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
echo "   cp env.example .env"
echo "   nano .env"
echo ""
echo "3. üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Supabase:"
echo "   - –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –Ω–∞ supabase.com"
echo "   - –î–æ–±–∞–≤—å—Ç–µ URL –∏ –∫–ª—é—á–∏ –≤ .env"
echo "   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: pnpm --filter api db:migrate"
echo ""
echo "4. ü§ñ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram –±–æ—Ç–∞:"
echo "   - –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather"
echo "   - –î–æ–±–∞–≤—å—Ç–µ BOT_TOKEN –≤ .env"
echo ""
echo "5. üíª –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:"
echo "   pnpm dev"
echo ""
echo "6. üöÄ Production –¥–µ–ø–ª–æ–π:"
echo "   - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ GitHub Secrets"
echo "   - Push –≤ main –≤–µ—Ç–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è"
echo ""
echo "üìö –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README.md"
echo "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç: QUICK_START.md"
echo ""
echo "üéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –¥–µ–ø–ª–æ—é!"
