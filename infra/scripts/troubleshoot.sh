#!/bin/bash

# Troubleshooting script for Telegram Mini App deployment
# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –¥–µ–ø–ª–æ–µ–º Telegram Mini App

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

echo "üîç Telegram Mini App - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –¥–µ–ø–ª–æ—è"
echo "=================================================="
echo ""

# Check if we're in the project root
if [ ! -f "docker-compose.prod.yml" ]; then
    log_error "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
fi

# 1. Check Docker containers status
log_info "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Docker..."
echo ""

if docker-compose -f docker-compose.prod.yml ps; then
    log_success "–ö–æ–º–∞–Ω–¥–∞ docker-compose –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
else
    log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    exit 1
fi

echo ""

# 2. Check container logs
log_info "2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
echo ""

log_info "üî∏ –õ–æ–≥–∏ Nginx:"
echo "----------------------------------------"
docker-compose -f docker-compose.prod.yml logs --tail=20 nginx || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ nginx"

echo ""
log_info "üî∏ –õ–æ–≥–∏ API:"
echo "----------------------------------------"
docker-compose -f docker-compose.prod.yml logs --tail=20 api || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ api"

echo ""
log_info "üî∏ –õ–æ–≥–∏ Web:"
echo "----------------------------------------"
docker-compose -f docker-compose.prod.yml logs --tail=20 web || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ web"

echo ""

# 3. Check network connectivity
log_info "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π..."
echo ""

# Check if containers can reach each other
log_info "üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
if docker exec tma-nginx wget -q --tries=1 --timeout=5 --spider http://api:3001/health 2>/dev/null; then
    log_success "‚úÖ Nginx -> API: OK"
else
    log_warning "‚ùå Nginx -> API: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
fi

if docker exec tma-nginx wget -q --tries=1 --timeout=5 --spider http://web:8080/health 2>/dev/null; then
    log_success "‚úÖ Nginx -> Web: OK"
else
    log_warning "‚ùå Nginx -> Web: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
fi

echo ""

# 4. Check individual container health
log_info "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
echo ""

log_info "üî∏ API Health Check:"
if curl -f -s --connect-timeout 5 http://localhost:3001/health > /dev/null 2>&1; then
    log_success "‚úÖ API health check: OK"
    API_RESPONSE=$(curl -s http://localhost:3001/health)
    echo "Response: $API_RESPONSE"
else
    log_warning "‚ùå API health check: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
fi

log_info "üî∏ Web Health Check:"
if curl -f -s --connect-timeout 5 http://localhost:8080/health > /dev/null 2>&1; then
    log_success "‚úÖ Web health check: OK"
    WEB_RESPONSE=$(curl -s http://localhost:8080/health)
    echo "Response: $WEB_RESPONSE"
else
    log_warning "‚ùå Web health check: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
fi

echo ""

# 5. Check SSL certificates
log_info "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
echo ""

if [ -f ".env" ]; then
    source .env
elif [ -f ".env.production" ]; then
    source .env.production
fi

if [ -n "${API_DOMAIN:-}" ] && [ -n "${APP_DOMAIN:-}" ]; then
    # Check if SSL certificates exist
    if [ -d "infra/ssl/$API_DOMAIN" ]; then
        if [ -f "infra/ssl/$API_DOMAIN/fullchain.pem" ] && [ -f "infra/ssl/$API_DOMAIN/privkey.pem" ]; then
            log_success "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è API –¥–æ–º–µ–Ω–∞ ($API_DOMAIN): –ù–∞–π–¥–µ–Ω—ã"
        else
            log_warning "‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è API –¥–æ–º–µ–Ω–∞ ($API_DOMAIN): –ù–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
    else
        log_warning "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è SSL –¥–ª—è API –¥–æ–º–µ–Ω–∞ ($API_DOMAIN): –ù–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi

    if [ -d "infra/ssl/$APP_DOMAIN" ]; then
        if [ -f "infra/ssl/$APP_DOMAIN/fullchain.pem" ] && [ -f "infra/ssl/$APP_DOMAIN/privkey.pem" ]; then
            log_success "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è App –¥–æ–º–µ–Ω–∞ ($APP_DOMAIN): –ù–∞–π–¥–µ–Ω—ã"
        else
            log_warning "‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è App –¥–æ–º–µ–Ω–∞ ($APP_DOMAIN): –ù–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
    else
        log_warning "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è SSL –¥–ª—è App –¥–æ–º–µ–Ω–∞ ($APP_DOMAIN): –ù–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
else
    log_warning "‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è API_DOMAIN –∏ APP_DOMAIN –Ω–µ –∑–∞–¥–∞–Ω—ã"
fi

echo ""

# 6. Check nginx configuration
log_info "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx..."
echo ""

if docker exec tma-nginx nginx -t 2>/dev/null; then
    log_success "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
else
    log_error "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx: –û—à–∏–±–∫–∏"
    docker exec tma-nginx nginx -t 2>&1 || true
fi

# Check if nginx config files exist
if [ -f "infra/nginx/conf.d/api.conf" ] && [ -f "infra/nginx/conf.d/web.conf" ]; then
    log_success "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Nginx: –ù–∞–π–¥–µ–Ω—ã"
else
    log_warning "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Nginx: –ù–µ –Ω–∞–π–¥–µ–Ω—ã"
    log_info "–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ templates"
fi

echo ""

# 7. Check environment variables
log_info "7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
echo ""

required_vars=(
    "API_DOMAIN"
    "APP_DOMAIN" 
    "BOT_TOKEN"
    "WEBHOOK_SECRET"
    "SUPABASE_URL"
    "SUPABASE_SERVICE_ROLE_KEY"
    "REGISTRY"
    "PROJECT_SLUG"
)

missing_vars=()
for var in "${required_vars[@]}"; do
    if [ -z "${!var:-}" ]; then
        missing_vars+=("$var")
    fi
done

if [ ${#missing_vars[@]} -eq 0 ]; then
    log_success "‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã"
else
    log_warning "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missing_vars[*]}"
fi

echo ""

# 8. Port connectivity check
log_info "8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤..."
echo ""

# Check if ports are listening
if netstat -tuln 2>/dev/null | grep -q ":80 "; then
    log_success "‚úÖ –ü–æ—Ä—Ç 80: –°–ª—É—à–∞–µ—Ç"
else
    log_warning "‚ùå –ü–æ—Ä—Ç 80: –ù–µ —Å–ª—É—à–∞–µ—Ç"
fi

if netstat -tuln 2>/dev/null | grep -q ":443 "; then
    log_success "‚úÖ –ü–æ—Ä—Ç 443: –°–ª—É—à–∞–µ—Ç"
else
    log_warning "‚ùå –ü–æ—Ä—Ç 443: –ù–µ —Å–ª—É—à–∞–µ—Ç"
fi

echo ""

# 9. External connectivity check (if domains are set)
if [ -n "${API_DOMAIN:-}" ] && [ -n "${APP_DOMAIN:-}" ]; then
    log_info "9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏..."
    echo ""
    
    log_info "üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ HTTPS:"
    if curl -I -s --connect-timeout 10 http://$API_DOMAIN | grep -q "301\|302"; then
        log_success "‚úÖ HTTP -> HTTPS —Ä–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è API: –†–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_warning "‚ùå HTTP -> HTTPS —Ä–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è API: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
    
    if curl -I -s --connect-timeout 10 http://$APP_DOMAIN | grep -q "301\|302"; then
        log_success "‚úÖ HTTP -> HTTPS —Ä–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è App: –†–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_warning "‚ùå HTTP -> HTTPS —Ä–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è App: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
    
    log_info "üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:"
    if curl -f -s --connect-timeout 10 https://$API_DOMAIN/health > /dev/null 2>&1; then
        log_success "‚úÖ HTTPS API ($API_DOMAIN): –î–æ—Å—Ç—É–ø–Ω–æ"
    else
        log_warning "‚ùå HTTPS API ($API_DOMAIN): –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    fi
    
    if curl -f -s --connect-timeout 10 https://$APP_DOMAIN/ > /dev/null 2>&1; then
        log_success "‚úÖ HTTPS App ($APP_DOMAIN): –î–æ—Å—Ç—É–ø–Ω–æ"
    else
        log_warning "‚ùå HTTPS App ($APP_DOMAIN): –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    fi
fi

echo ""
echo "=================================================="
echo "üéØ –ö—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
echo "=================================================="

# Summary
echo "üìã –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:"
echo ""

if [ ${#missing_vars[@]} -gt 0 ]; then
    echo "1. ‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
    for var in "${missing_vars[@]}"; do
        echo "   - $var"
    done
    echo ""
fi

if [ ! -f "infra/nginx/conf.d/api.conf" ] || [ ! -f "infra/nginx/conf.d/web.conf" ]; then
    echo "2. üîß –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã nginx:"
    echo "   envsubst '\${API_DOMAIN} \${APP_DOMAIN}' < infra/nginx/conf.d/api.conf.template > infra/nginx/conf.d/api.conf"
    echo "   envsubst '\${API_DOMAIN} \${APP_DOMAIN}' < infra/nginx/conf.d/web.conf.template > infra/nginx/conf.d/web.conf"
    echo ""
fi

if [ -n "${API_DOMAIN:-}" ] && [ -n "${APP_DOMAIN:-}" ]; then
    if [ ! -d "infra/ssl/$API_DOMAIN" ] || [ ! -d "infra/ssl/$APP_DOMAIN" ]; then
        echo "3. üîê –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:"
        echo "   ./infra/scripts/certbot-init.sh $API_DOMAIN $APP_DOMAIN your-email@example.com"
        echo ""
    fi
fi

echo "4. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã:"
echo "   docker-compose -f docker-compose.prod.yml down"
echo "   docker-compose -f docker-compose.prod.yml up -d"
echo ""

echo "5. üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤:"
echo "   docker-compose -f docker-compose.prod.yml logs -f"
echo ""

echo "üÜò –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:"
echo "   - DNS –∑–∞–ø–∏—Å–∏ –¥–æ–º–µ–Ω–æ–≤ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä"
echo "   - Firewall –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ä—Ç—ã 80/443"
echo "   - –û–±—Ä–∞–∑—ã Docker —Å–æ–±—Ä–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"

echo ""
echo "üéâ –ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º."
