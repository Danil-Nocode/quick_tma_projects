#!/bin/bash

# Quick fix script for common deployment issues
# –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –¥–µ–ø–ª–æ—è

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

echo "üîß Telegram Mini App - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –¥–µ–ø–ª–æ—è"
echo "=================================================="
echo ""

# Check if we're in the project root
if [ ! -f "docker-compose.prod.yml" ]; then
    log_error "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
fi

# Load environment variables
if [ -f ".env.production" ]; then
    log_info "–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.production"
    set -a
    source .env.production
    set +a
elif [ -f ".env" ]; then
    log_info "–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env"
    set -a
    source .env
    set +a
else
    log_warning "–§–∞–π–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
    echo "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏–ª–∏ .env.production –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example"
    read -p "–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª .env —Å–µ–π—á–∞—Å? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        cp env.example .env
        log_info "–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞"
        exit 0
    else
        log_error "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        exit 1
    fi
fi

# Validate required environment variables
required_vars=(
    "API_DOMAIN"
    "APP_DOMAIN"
    "BOT_TOKEN"
    "WEBHOOK_SECRET"
    "SUPABASE_URL"
    "SUPABASE_SERVICE_ROLE_KEY"
    "REGISTRY"
    "PROJECT_SLUG"
)

log_info "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
missing_vars=()
for var in "${required_vars[@]}"; do
    if [ -z "${!var:-}" ]; then
        missing_vars+=("$var")
    fi
done

if [ ${#missing_vars[@]} -gt 0 ]; then
    log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
    for var in "${missing_vars[@]}"; do
        echo "  - $var"
    done
    log_error "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ .env –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞"
    exit 1
fi

log_success "–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"

# Create nginx configurations from templates
log_info "2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ nginx..."
mkdir -p infra/nginx/conf.d

if envsubst '${API_DOMAIN} ${APP_DOMAIN}' < infra/nginx/conf.d/api.conf.template > infra/nginx/conf.d/api.conf; then
    log_success "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª infra/nginx/conf.d/api.conf"
else
    log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å api.conf"
    exit 1
fi

if envsubst '${API_DOMAIN} ${APP_DOMAIN}' < infra/nginx/conf.d/web.conf.template > infra/nginx/conf.d/web.conf; then
    log_success "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª infra/nginx/conf.d/web.conf"
else
    log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å web.conf"
    exit 1
fi

# Check SSL certificates
log_info "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
ssl_missing=false

if [ ! -d "infra/ssl/$API_DOMAIN" ] || [ ! -f "infra/ssl/$API_DOMAIN/fullchain.pem" ]; then
    log_warning "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è $API_DOMAIN –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    ssl_missing=true
fi

if [ ! -d "infra/ssl/$APP_DOMAIN" ] || [ ! -f "infra/ssl/$APP_DOMAIN/fullchain.pem" ]; then
    log_warning "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è $APP_DOMAIN –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"  
    ssl_missing=true
fi

if [ "$ssl_missing" = true ]; then
    echo ""
    log_warning "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
    echo ""
    echo "–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:"
    echo ""
    echo "üìã –í–ê–†–ò–ê–ù–¢ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
    echo "   ./infra/scripts/certbot-init.sh $API_DOMAIN $APP_DOMAIN your-email@example.com"
    echo ""
    echo "üìã –í–ê–†–ò–ê–ù–¢ 2: –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ HTTPS –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    echo "   (—Å–æ–∑–¥–∞—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è HTTP)"
    echo ""
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1 –¥–ª—è Let's Encrypt, 2 –¥–ª—è HTTP, s –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[1]$ ]]; then
        read -p "–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è Let's Encrypt: " email
        if [ -n "$email" ]; then
            log_info "–ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
            chmod +x infra/scripts/certbot-init.sh
            ./infra/scripts/certbot-init.sh "$API_DOMAIN" "$APP_DOMAIN" "$email"
        else
            log_warning "Email –Ω–µ –≤–≤–µ–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É SSL"
        fi
    elif [[ $REPLY =~ ^[2]$ ]]; then
        log_info "–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π HTTP-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
        
        # Create temporary HTTP-only configs
        cat > infra/nginx/conf.d/api.conf << EOF
server {
    listen 80;
    server_name $API_DOMAIN;

    # Rate limiting for webhook
    location /webhook {
        limit_req zone=webhook burst=10 nodelay;
        
        proxy_pass http://api_backend;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # API routes with rate limiting
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        
        proxy_pass http://api_backend;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # Health check endpoint
    location /health {
        proxy_pass http://api_backend;
        proxy_set_header Host \$host;
        access_log off;
    }

    # Root redirect to app domain
    location = / {
        return 301 http://$APP_DOMAIN;
    }
}
EOF

        cat > infra/nginx/conf.d/web.conf << EOF
server {
    listen 80;
    server_name $APP_DOMAIN;

    root /usr/share/nginx/html;
    index index.html;

    # Static files caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        gzip_static on;
    }

    # Main SPA route
    location / {
        try_files \$uri \$uri/ /index.html;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
    }

    # Health check endpoint
    location /health {
        proxy_pass http://web_backend;
        proxy_set_header Host \$host;
        access_log off;
    }
}
EOF

        log_success "–í—Ä–µ–º–µ–Ω–Ω–∞—è HTTP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"
        log_warning "‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å HTTPS –¥–ª—è production!"
    else
        log_info "–ü—Ä–æ–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL"
    fi
else
    log_success "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã"
fi

# Stop existing containers
log_info "4. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose -f docker-compose.prod.yml down || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã)"

# Pull/build images
log_info "5. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤..."
docker-compose -f docker-compose.prod.yml pull || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–∑—ã, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ"

# Start services
log_info "6. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
if docker-compose -f docker-compose.prod.yml up -d --remove-orphans; then
    log_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
else
    log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
    log_info "–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏..."
    docker-compose -f docker-compose.prod.yml logs
    exit 1
fi

# Wait for services
log_info "7. –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 15

# Health checks
log_info "8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏..."

# Check API
api_healthy=false
for i in {1..10}; do
    if curl -f -s --connect-timeout 5 http://localhost:3001/health > /dev/null 2>&1; then
        log_success "‚úÖ API –∑–¥–æ—Ä–æ–≤"
        api_healthy=true
        break
    fi
    log_info "–ü–æ–ø—ã—Ç–∫–∞ $i/10: –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API..."
    sleep 3
done

if [ "$api_healthy" = false ]; then
    log_warning "‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ health check"
fi

# Check Web
web_healthy=false
for i in {1..10}; do
    if curl -f -s --connect-timeout 5 http://localhost:8080/health > /dev/null 2>&1; then
        log_success "‚úÖ Web –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤–æ"
        web_healthy=true
        break
    fi
    log_info "–ü–æ–ø—ã—Ç–∫–∞ $i/10: –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Web..."
    sleep 3
done

if [ "$web_healthy" = false ]; then
    log_warning "‚ùå Web –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ health check"
fi

# Setup webhook if API is healthy
if [ "$api_healthy" = true ]; then
    log_info "9. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook..."
    if curl -X POST "http://localhost:3001/api/webhook/set" \
         -H "Content-Type: application/json" \
         -f -s > /dev/null 2>&1; then
        log_success "‚úÖ Telegram webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        log_warning "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram webhook"
    fi
fi

# Show final status
echo ""
echo "========================================="
echo "         üéØ –ò—Ç–æ–≥–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
echo "========================================="

docker-compose -f docker-compose.prod.yml ps

echo ""

if [ "$api_healthy" = true ] && [ "$web_healthy" = true ]; then
    log_success "üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
    echo ""
    echo "–í–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å–∞–º:"
    if [ "$ssl_missing" = false ]; then
        echo "  üì± Web App: https://$APP_DOMAIN"
        echo "  üîó API Health: https://$API_DOMAIN/health"
    else
        echo "  üì± Web App: http://$APP_DOMAIN"
        echo "  üîó API Health: http://$API_DOMAIN/health"
    fi
else
    log_warning "‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    echo ""
    echo "–î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
    echo "  ./infra/scripts/troubleshoot.sh"
    echo "  docker-compose -f docker-compose.prod.yml logs -f"
fi

echo ""
echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
echo "  docker-compose -f docker-compose.prod.yml logs -f"
echo "  docker-compose -f docker-compose.prod.yml ps"
