import { useState } from 'react'

interface PingSectionProps {
  initData: string
  apiBaseUrl: string
  apiStatus: 'checking' | 'online' | 'offline'
}

export const PingSection = ({ initData, apiBaseUrl, apiStatus }: PingSectionProps) => {
  const [loading, setLoading] = useState(false)
  const [response, setResponse] = useState<any>(null)
  const [error, setError] = useState<string | null>(null)

  const handlePing = async () => {
    if (!initData) {
      setError('InitData –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.')
      return
    }

    setLoading(true)
    setError(null)
    setResponse(null)

    try {
      const pingResponse = await fetch(`${apiBaseUrl}/api/ping`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          initData: initData
        })
      })

      const data = await pingResponse.json()

      if (pingResponse.ok) {
        setResponse(data)
      } else {
        setError(data.error || 'API request failed')
      }
    } catch (err) {
      console.error('Ping error:', err)
      setError(err instanceof Error ? err.message : 'Network error')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="ping-section">
      <button 
        className="button" 
        onClick={handlePing}
        disabled={loading || apiStatus === 'offline' || !initData}
      >
        {loading ? (
          <>
            <div className="loading"></div>
            –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...
          </>
        ) : (
          'üèì Ping API'
        )}
      </button>

      {apiStatus === 'offline' && (
        <div className="response-card error">
          <p>‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>
          <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É</p>
        </div>
      )}

      {!initData && apiStatus === 'online' && (
        <div className="response-card error">
          <p>‚ö†Ô∏è InitData –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>
          <p>–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</p>
        </div>
      )}

      {error && (
        <div className="response-card error">
          <h4>‚ùå –û—à–∏–±–∫–∞</h4>
          <p>{error}</p>
        </div>
      )}

      {response && (
        <div className="response-card success">
          <h4>‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞</h4>
          <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {response.status}</p>
          <p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> {response.message}</p>
          {response.user && (
            <div style={{ marginTop: '12px' }}>
              <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω:</strong></p>
              <p>‚Ä¢ ID: {response.user.id}</p>
              <p>‚Ä¢ –ò–º—è: {response.user.first_name} {response.user.last_name}</p>
              {response.user.username && <p>‚Ä¢ Username: @{response.user.username}</p>}
            </div>
          )}
          <pre>{JSON.stringify(response, null, 2)}</pre>
        </div>
      )}
    </div>
  )
}
